0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.33
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/hongru/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/hongru/.npm/packageapp/0.1.31/package.tgz', '.' ]
11 verbose tarball /Users/hongru/.npm/packageapp/0.1.31/package.tgz
12 verbose folder .
13 info prepublish packageapp@0.1.31
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/hongru/.npm/1f1177db-tar.lock
16 silly lockFile 466e8b28-pm-packageapp-0-1-31-package-tgz tar:///Users/hongru/.npm/packageapp/0.1.31/package.tgz
17 verbose lock tar:///Users/hongru/.npm/packageapp/0.1.31/package.tgz /Users/hongru/.npm/466e8b28-pm-packageapp-0-1-31-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 466e8b28-pm-packageapp-0-1-31-package-tgz tar:///Users/hongru/.npm/packageapp/0.1.31/package.tgz
21 silly lockFile 466e8b28-pm-packageapp-0-1-31-package-tgz tar:///Users/hongru/.npm/packageapp/0.1.31/package.tgz
22 silly lockFile 19732ab5-ru-npm-packageapp-0-1-31-package /Users/hongru/.npm/packageapp/0.1.31/package
23 verbose lock /Users/hongru/.npm/packageapp/0.1.31/package /Users/hongru/.npm/19732ab5-ru-npm-packageapp-0-1-31-package.lock
24 silly lockFile 19732ab5-ru-npm-packageapp-0-1-31-package /Users/hongru/.npm/packageapp/0.1.31/package
25 silly lockFile 19732ab5-ru-npm-packageapp-0-1-31-package /Users/hongru/.npm/packageapp/0.1.31/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'packageapp',
28 silly publish   version: '0.1.31',
28 silly publish   description: 'A tool for mtb-PackageApp auto-checking & auto-packing',
28 silly publish   main: 'lib/core.js',
28 silly publish   bin: { pack: 'bin/pack.js' },
28 silly publish   scripts:
28 silly publish    { test: 'mocha',
28 silly publish      'test-travis': 'node node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --reporter dot' },
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'https://github.com/amfe/or.packagetool.git' },
28 silly publish   keywords: [ 'packageapp', 'offline' ],
28 silly publish   dependencies:
28 silly publish    { archiver: '~0.12.0',
28 silly publish      cheerio: '^0.18.0',
28 silly publish      'fs-extra': '^0.16.3',
28 silly publish      commander: '^2.6.0',
28 silly publish      chalk: '^1.0.0',
28 silly publish      request: '^2.53.0' },
28 silly publish   devDependencies: { istanbul: '^0.3.6', coveralls: '^2.10.0', mocha: '^2.1.0' },
28 silly publish   author: { name: 'cenan.chr' },
28 silly publish   license: 'MIT',
28 silly publish   bugs: { url: 'https://github.com/amfe/or.packagetool/issues' },
28 silly publish   homepage: 'https://github.com/amfe/or.packagetool',
28 silly publish   readme: '# PackageTool\n\nv0.1.32\nA package tool for Mtb-PackageApp auto-checking & auto-packing\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Downloads][downloads-image]][downloads-url]\n\n## Usage\n\n```shell\n$ npm install -g packageapp\n```\n\n```\n  Usage: pack [options] <htmlfile ...>\n\n  Options:\n\n    -h, --help            output usage information\n    -V, --version         output the version number\n    -p --prefix [string]  Prefix of dest file\n    -z --zip <path>       Dest Zip Path, default is `process.cwd()`\n```\n\n比如，打包当前目录为一个Package Zip，默认会将所有js，css，image离线化，并自动压缩。\n```shell\n$ pack ./*.html\n```\n或者，直接将线上页面抓去所有依赖资源并离线化打包\n```\n$ pack http://m.taobao.com\n```\n\n\nhtml文件里面不需要 离线的url可以在tag上加上`keeplive`的属性即可。比如：\n```javascript\n<script src="http://aaa.js" keeplive></script>\n```\n\n## PackageTool 集成功能\n\n+ link标签资源自动离线\n+ script标签资源自动离线\n+ img标签图片自动离线\n+ css引用资源(图片，字体)自动离线\n+ js脚本中引用资源自动离线\n+ 离线资源（js,css,image）自动压缩\n+ 自动打包成规范zip供上传\n+ 检查生成zip包大小\n+ 根据.gitignore忽略文件和文件夹打包\n+ 根据线上页面url地址自动抓取项目资源离线化打包\n\n\n## 使用需知\n\n在使用这个[PackageApp](http://www.atatech.org/articles/23279)打包工具之前，可以先了解一下[PackageApp](http://www.atatech.org/articles/23279)是什么。为了更好更方便大家基于[PackageApp](http://www.atatech.org/articles/23279)的原理和规范一键将你的项目接入PackageApp，我们产生了一些工具可以方便的提供给大家使用。\n\n本质上来讲，[AWP](http://h5.taobao.org)平台提供的PackageApp这个功能，原理上是基于预置包的形式，将我们项目资源提前预置到客户端中，于是当访问这个项目资源的时候，其依赖的资源读取相当于是直接读取本地文件，省去了网络的开销和资源下载。从而提升web app性能。\n\n他需要我们把项目打包成一个zip，并且项目中主要的资源依赖是需要在zip包里一起，并且在项目里是相对路径引用的形式，这样才能达到PackageApp加速的目的。而我们的工具基本上就是针对这个过程，做了这么几件主要的事情。\n\n+ 分析项目中所有的资源依赖，把在线资源离线化\n+ 将资源引用的url替换为离线化后的资源的相对路径\n+ 全部资源分析和离线化完成之后，打包成zip供直接上传。\n\n在这个过程中，我们提供了针对不同业务场景，有不同特异化需求的BU予不同的工具选择。\n\n+ 基于kimi开发规范的同学(Taobao)可以选择使用 [`def kimi zip`](http://www.atatech.org/articles/29745?rnd=146754725) 插件，来自@妙净\n+ 基于Kissy-Mobile开发的同学(Tmall)可以选择使用 @跑猪 提供的 [PackTool]() 打包工具\n+ 无业务规范捆绑，或者普通web app可以选择使用 [Packageapp](https://www.npmjs.com/package/packageapp) @岑安 提供\n\n以上工具除了共性的做了资源依赖分析和离线化处理之外，每个工具针对相应的业务规范或者需求提供了额外的一些features，具体的差别可以查看每个工具提供的Features列表。\n\n以下针对[Packageapp](https://www.npmjs.com/package/packageapp) 工具的使用和注意事项做一个详细的说明，供大家参考。\n\n## [Packageapp Tool](https://www.npmjs.com/package/packageapp)\n\n如上，经过\n```shell\n$ npm install -g packageapp\n```\n安装好之后。就可以开始选择一个本地的项目进行离线化分析和打包。比如我有一个简单的页面是这样。\n`tests`目录下有两个页面\n![img](http://gw.alicdn.com/tfscom/TB16gJDHpXXXXXMXpXXkQvV2pXX-220-122.png)\n其中`testA.html` 页面大致如下。\n![img](http://gw.alicdn.com/tfscom/TB1uvlFHpXXXXbqXXXXfH0O8pXX-900-411.png)\n\n我们需要将这两个文件都进行离线分析，在项目根目录`tests`下运行\n```\n$ pack *.html\n```\n![img](http://gw.alicdn.com/tfscom/TB1XxltHpXXXXXIaXXXWiF.3XXX-700-97.png)\n\n执行完成后，可以看到，在执行命令的项目根目录里多了一个`app.zip` 和 `www` 文件夹。\n\n![img](http://gw.alicdn.com/tfscom/TB1cptDHpXXXXazXpXXhAP7NVXX-400-123.png)\n\n其中`www`文件夹中就是离线化好的项目文件以及各种资源。可以直接访问离线化后的页面验证是否资源已经离线完毕并且路径替换正确。\n而 `app.zip`就是离线化完成的`www`文件夹的打包。验证无误后可以直接上传AWP的PackageApp。\n\n再来看看离线化后`www`目录下的`testA.html` 文件。\n\n![img](http://gw.alicdn.com/tfscom/TB1l4JtHpXXXXbFaXXX4G8M8pXX-900-400.png)\n\n可以发现页面资源已经全部离线化并替换url。包括引用的`shake.css`中的在线图片资源也已经全部离线化。\n\n![img](http://gw.alicdn.com/tfscom/TB10tlFHpXXXXcCXXXXxfsU1XXX-1000-174.png)\n变成\n![img](http://gw.alicdn.com/tfscom/TB1nYJBHpXXXXX7XFXXgqZT1XXX-1000-166.png)\n\n\n使用过程就是这么简单。工具提供了两个参数\n\n+ `-p --prefix` 用于指定离线化html文件的前缀，默认没有前缀就是原来的文件名\n+ `-z --zip` 用于指定生成的zip文件地址，默认在执行命令的当前目录，也就是项目根目录。\n\n### 需要注意的几个事项\n\n1. 工具以html文件为入口，分析html文件依赖的在线js，css，img资源，会自动提取离线并替换路径。同时，如果依赖的css文件中又有依赖在线的图片，字体等资源，也会自动离线资源并替换路径。\n2. js文件和内容中只能处理完整的url资源路径的提取和替换，但是有路径拼接的资源暂时不能分析和提取。\n3. 如果html文档中有不想被离线化的资源，可以在html标签上加上`keeplive`的属性。\n4. css 和 js内容中如果有不想被离线的资源，暂时没有提供此功能，今后考虑以规范注释的形式加上。\n5. 本工具只负责项目离线化分析和路径替换以及项目打包。zip包自动上传并发布的功能参考 [PackTool](http://gitlab.alibaba-inc.com/h5-tools/packapp/blob/master/lib/upload.js) 的zip包上传发布工具。\n\n\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: 'df630d8ff2f361291526d31bf6c598de99e4c273',
28 silly publish   _id: 'packageapp@0.1.31',
28 silly publish   _shasum: '4cf4cb18114456b9a6f369e477e5a3ef6c52b19c',
28 silly publish   _from: '.' }
29 verbose request where is /packageapp
30 verbose request registry https://registry.npmjs.org/
31 verbose request id 572b9836f605be9f
32 verbose url raw /packageapp
33 verbose url resolving [ 'https://registry.npmjs.org/', './packageapp' ]
34 verbose url resolved https://registry.npmjs.org/packageapp
35 verbose request where is https://registry.npmjs.org/packageapp
36 info trying registry request attempt 1 at 18:37:11
37 http PUT https://registry.npmjs.org/packageapp
38 http 403 https://registry.npmjs.org/packageapp
39 verbose headers { date: 'Mon, 02 Mar 2015 10:37:13 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '10088',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-nrt6120-NRT',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1425292632.096867,VS0,VE1163',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 0.1.31
41 error old={"name":"packageapp","version":"0.1.31","description":"A tool for mtb-PackageApp auto-checking & auto-packing","main":"lib/core.js","bin":{"pack":"bin/pack.js"},"scripts":{"test":"mocha","test-travis":"node node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --reporter dot"},"repository":{"type":"git","url":"https://github.com/amfe/or.packagetool.git"},"keywords":["packageapp","offline"],"dependencies":{"archiver":"~0.12.0","cheerio":"^0.18.0","fs-extra":"^0.16.3","commander":"^2.6.0","chalk":"^1.0.0","request":"^2.53.0"},"devDependencies":{"istanbul":"^0.3.6","coveralls":"^2.10.0","mocha":"^2.1.0"},"author":{"name":"cenan.chr"},"license":"MIT","bugs":{"url":"https://github.com/amfe/or.packagetool/issues"},"homepage":"https://github.com/amfe/or.packagetool","gitHead":"d027d9e8384226154921546d2092a35b92fc6ac6","_id":"packageapp@0.1.31","_shasum":"724b48ce4d04f05dca5eabb842e5f51d505981ac","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"hongru","email":"hongru.chenhr@gmail.com"},"maintainers":[{"name":"hongru","email":"hongru.chenhr@gmail.com"}],"dist":{"shasum":"724b48ce4d04f05dca5eabb842e5f51d505981ac","tarball":"http://registry.npmjs.org/packageapp/-/packageapp-0.1.31.tgz"}}
41 error new={"name":"packageapp","version":"0.1.31","description":"A tool for mtb-PackageApp auto-checking & auto-packing","main":"lib/core.js","bin":{"pack":"bin/pack.js"},"scripts":{"test":"mocha","test-travis":"node node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha --report lcovonly -- --reporter dot"},"repository":{"type":"git","url":"https://github.com/amfe/or.packagetool.git"},"keywords":["packageapp","offline"],"dependencies":{"archiver":"~0.12.0","cheerio":"^0.18.0","fs-extra":"^0.16.3","commander":"^2.6.0","chalk":"^1.0.0","request":"^2.53.0"},"devDependencies":{"istanbul":"^0.3.6","coveralls":"^2.10.0","mocha":"^2.1.0"},"author":{"name":"cenan.chr"},"license":"MIT","bugs":{"url":"https://github.com/amfe/or.packagetool/issues"},"homepage":"https://github.com/amfe/or.packagetool","readme":"# PackageTool\u000a\u000av0.1.32\u000aA package tool for Mtb-PackageApp auto-checking & auto-packing\u000a\u000a[![NPM version][npm-image]][npm-url]\u000a[![Build status][travis-image]][travis-url]\u000a[![Test coverage][coveralls-image]][coveralls-url]\u000a[![Downloads][downloads-image]][downloads-url]\u000a\u000a## Usage\u000a\u000a```shell\u000a$ npm install -g packageapp\u000a```\u000a\u000a```\u000a  Usage: pack [options] <htmlfile ...>\u000a\u000a  Options:\u000a\u000a    -h, --help            output usage information\u000a    -V, --version         output the version number\u000a    -p --prefix [string]  Prefix of dest file\u000a    -z --zip <path>       Dest Zip Path, default is `process.cwd()`\u000a```\u000a\u000a比如，打包当前目录为一个Package Zip，默认会将所有js，css，image离线化，并自动压缩。\u000a```shell\u000a$ pack ./*.html\u000a```\u000a或者，直接将线上页面抓去所有依赖资源并离线化打包\u000a```\u000a$ pack http://m.taobao.com\u000a```\u000a\u000a\u000ahtml文件里面不需要 离线的url可以在tag上加上`keeplive`的属性即可。比如：\u000a```javascript\u000a<script src=\"http://aaa.js\" keeplive></script>\u000a```\u000a\u000a## PackageTool 集成功能\u000a\u000a+ link标签资源自动离线\u000a+ script标签资源自动离线\u000a+ img标签图片自动离线\u000a+ css引用资源(图片，字体)自动离线\u000a+ js脚本中引用资源自动离线\u000a+ 离线资源（js,css,image）自动压缩\u000a+ 自动打包成规范zip供上传\u000a+ 检查生成zip包大小\u000a+ 根据.gitignore忽略文件和文件夹打包\u000a+ 根据线上页面url地址自动抓取项目资源离线化打包\u000a\u000a\u000a## 使用需知\u000a\u000a在使用这个[PackageApp](http://www.atatech.org/articles/23279)打包工具之前，可以先了解一下[PackageApp](http://www.atatech.org/articles/23279)是什么。为了更好更方便大家基于[PackageApp](http://www.atatech.org/articles/23279)的原理和规范一键将你的项目接入PackageApp，我们产生了一些工具可以方便的提供给大家使用。\u000a\u000a本质上来讲，[AWP](http://h5.taobao.org)平台提供的PackageApp这个功能，原理上是基于预置包的形式，将我们项目资源提前预置到客户端中，于是当访问这个项目资源的时候，其依赖的资源读取相当于是直接读取本地文件，省去了网络的开销和资源下载。从而提升web app性能。\u000a\u000a他需要我们把项目打包成一个zip，并且项目中主要的资源依赖是需要在zip包里一起，并且在项目里是相对路径引用的形式，这样才能达到PackageApp加速的目的。而我们的工具基本上就是针对这个过程，做了这么几件主要的事情。\u000a\u000a+ 分析项目中所有的资源依赖，把在线资源离线化\u000a+ 将资源引用的url替换为离线化后的资源的相对路径\u000a+ 全部资源分析和离线化完成之后，打包成zip供直接上传。\u000a\u000a在这个过程中，我们提供了针对不同业务场景，有不同特异化需求的BU予不同的工具选择。\u000a\u000a+ 基于kimi开发规范的同学(Taobao)可以选择使用 [`def kimi zip`](http://www.atatech.org/articles/29745?rnd=146754725) 插件，来自@妙净\u000a+ 基于Kissy-Mobile开发的同学(Tmall)可以选择使用 @跑猪 提供的 [PackTool]() 打包工具\u000a+ 无业务规范捆绑，或者普通web app可以选择使用 [Packageapp](https://www.npmjs.com/package/packageapp) @岑安 提供\u000a\u000a以上工具除了共性的做了资源依赖分析和离线化处理之外，每个工具针对相应的业务规范或者需求提供了额外的一些features，具体的差别可以查看每个工具提供的Features列表。\u000a\u000a以下针对[Packageapp](https://www.npmjs.com/package/packageapp) 工具的使用和注意事项做一个详细的说明，供大家参考。\u000a\u000a## [Packageapp Tool](https://www.npmjs.com/package/packageapp)\u000a\u000a如上，经过\u000a```shell\u000a$ npm install -g packageapp\u000a```\u000a安装好之后。就可以开始选择一个本地的项目进行离线化分析和打包。比如我有一个简单的页面是这样。\u000a`tests`目录下有两个页面\u000a![img](http://gw.alicdn.com/tfscom/TB16gJDHpXXXXXMXpXXkQvV2pXX-220-122.png)\u000a其中`testA.html` 页面大致如下。\u000a![img](http://gw.alicdn.com/tfscom/TB1uvlFHpXXXXbqXXXXfH0O8pXX-900-411.png)\u000a\u000a我们需要将这两个文件都进行离线分析，在项目根目录`tests`下运行\u000a```\u000a$ pack *.html\u000a```\u000a![img](http://gw.alicdn.com/tfscom/TB1XxltHpXXXXXIaXXXWiF.3XXX-700-97.png)\u000a\u000a执行完成后，可以看到，在执行命令的项目根目录里多了一个`app.zip` 和 `www` 文件夹。\u000a\u000a![img](http://gw.alicdn.com/tfscom/TB1cptDHpXXXXazXpXXhAP7NVXX-400-123.png)\u000a\u000a其中`www`文件夹中就是离线化好的项目文件以及各种资源。可以直接访问离线化后的页面验证是否资源已经离线完毕并且路径替换正确。\u000a而 `app.zip`就是离线化完成的`www`文件夹的打包。验证无误后可以直接上传AWP的PackageApp。\u000a\u000a再来看看离线化后`www`目录下的`testA.html` 文件。\u000a\u000a![img](http://gw.alicdn.com/tfscom/TB1l4JtHpXXXXbFaXXX4G8M8pXX-900-400.png)\u000a\u000a可以发现页面资源已经全部离线化并替换url。包括引用的`shake.css`中的在线图片资源也已经全部离线化。\u000a\u000a![img](http://gw.alicdn.com/tfscom/TB10tlFHpXXXXcCXXXXxfsU1XXX-1000-174.png)\u000a变成\u000a![img](http://gw.alicdn.com/tfscom/TB1nYJBHpXXXXX7XFXXgqZT1XXX-1000-166.png)\u000a\u000a\u000a使用过程就是这么简单。工具提供了两个参数\u000a\u000a+ `-p --prefix` 用于指定离线化html文件的前缀，默认没有前缀就是原来的文件名\u000a+ `-z --zip` 用于指定生成的zip文件地址，默认在执行命令的当前目录，也就是项目根目录。\u000a\u000a### 需要注意的几个事项\u000a\u000a1. 工具以html文件为入口，分析html文件依赖的在线js，css，img资源，会自动提取离线并替换路径。同时，如果依赖的css文件中又有依赖在线的图片，字体等资源，也会自动离线资源并替换路径。\u000a2. js文件和内容中只能处理完整的url资源路径的提取和替换，但是有路径拼接的资源暂时不能分析和提取。\u000a3. 如果html文档中有不想被离线化的资源，可以在html标签上加上`keeplive`的属性。\u000a4. css 和 js内容中如果有不想被离线的资源，暂时没有提供此功能，今后考虑以规范注释的形式加上。\u000a5. 本工具只负责项目离线化分析和路径替换以及项目打包。zip包自动上传并发布的功能参考 [PackTool](http://gitlab.alibaba-inc.com/h5-tools/packapp/blob/master/lib/upload.js) 的zip包上传发布工具。\u000a\u000a\u000a","readmeFilename":"README.md","gitHead":"df630d8ff2f361291526d31bf6c598de99e4c273","_id":"packageapp@0.1.31","_shasum":"4cf4cb18114456b9a6f369e477e5a3ef6c52b19c","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"hongru","email":"hongru.chenhr@gmail.com"},"maintainers":[{"name":"hongru","email":"hongru.chenhr@gmail.com"}],"dist":{"shasum":"4cf4cb18114456b9a6f369e477e5a3ef6c52b19c","tarball":"http://registry.npmjs.org/packageapp/-/packageapp-0.1.31.tgz"}}: packageapp
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:943:16
41 error     at process._tickCallback (node.js:419:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 14.0.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/hongru/Work/gitlab/One-Request/or-packageapp
46 error node -v v0.10.33
47 error npm -v 1.4.28
48 verbose exit [ 1, true ]
